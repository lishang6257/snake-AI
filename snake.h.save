#ifndef SNAKE_H_INCLUDED
#define SNAKE_H_INCLUDED

#define max_speed 1
#define max_acceleration 1

#include "position.h"
#include "field.h"
#include <queue>

using namespace std;

class Snake{
public:
    Snake(const vector<position> &v);
    Snake();//useless
    ~Snake();

    inline void setDirection(direction d){
        lastDir = dir;dir = d;
        //更新速度
        updateSpeed();
    }
    vector<position>& getSnake(){return asnake;}
    inline direction getDirection(){return dir;}
    inline double getAccelation(){return acceleration;}

    inline void updateSpeed(){
        updateAcceleration();
        speed += acceleration;

    }
    bool move();
    bool eatAndMove();
    bool move(Field& f);
    bool autoMove();
private:
    vector<position> asnake;
    vector<direction> historyDir;
    double speed;
    double acceleration;
    direction dir,lastDir;
    inline void updateAcceleration(){
        if(dir == DNone)
            acceleration = 0;
        else if(dir != lastDir)
            acceleration = m
        else
            acceleration = (acceleration + 1) > max_acceleration ? max_acceleration : (acceleration+1);
    }
};

#endif // SNAKE_H_INCLUDED
